# -*- coding: utf-8 -*-
"""Copy of Crop Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nAwLyJCu5Nyj-pWZ0I5q3aM5Oq_HbWuu
"""

!pip install pycaret

"""## Importing Packages"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/corn yield.csv")

"""## Analysing Data"""

df.head()

df.isnull().sum()

for i in df:
    print(i,df[i].value_counts(),sep="\n",end="\n")

cols_to_be_removed = ["Program","Week Ending","Ag District","Ag District Code","County","County ANSI","Zip Code","Region","Watershed","CV (%)","Domain Category","Commodity","Geo Level","watershed_code","Domain"]

df.drop(columns=cols_to_be_removed,axis = 1,inplace=True)

"""## Data Overview"""

prof

"""## Transforming data to required format"""

df["State ANSI"].fillna(0,inplace=True)

df.isnull().sum()

for i in df:
    print(i,df[i].value_counts(),sep="\n",end="\n")

df["Value"] = df["Value"].str.replace(',','')
df["State ANSI"] = df["State ANSI"].astype("int")
df["Value"] = df["Value"].astype("float")

"""## One Hot encoding"""

df.head()

from sklearn.preprocessing import LabelEncoder
import category_encoders as ce



def one_hot_encoding(df,column):
    one_hot_encoder=ce.OneHotEncoder(cols=column,return_df=True,use_cat_names=True)
    df_final = one_hot_encoder.fit_transform(df)
    return df_final

df = one_hot_encoding(df,"Period")
df = one_hot_encoding(df,"Data Item")
df = one_hot_encoding(df,"State")

!pip install category_encoders

!pip install category encoders

X = df.drop("Value",axis = 1)
Y = df["Value"]

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,random_state=27,test_size=0.2)

"""## Model Comparison"""

train,test = train_test_split(df, test_size=0.25,random_state= 27)

experiment = setup(
    data = train,
    target = 'Value',
    imputation_type='iterative'
)

compare_models()

"""<b>As Random Forest Regressor gives more R<sup>2</sup> value we choose them for training our model ðŸ”¥</b>

## Training Models
"""

random_reg = RandomForestRegressor(n_estimators = 100, random_state = 0)

random_reg.fit(X_train, Y_train)

Y_pred = random_reg.predict(X_test)

"""## Evaluation Metrics"""

mse = mean_squared_error(Y_pred,Y_test)
mse

mae = mean_absolute_error(Y_pred,Y_test)
mae

r2_score = r2_score(Y_pred,Y_test)
r2_score